/*
** 
** Copyright (C) 2019 Ambrose Gihan de Silva
** 
** Redistribution and use in source and binary forms, with or without 
** modification, are permitted provided that the following conditions are met:
** 
** 1. Redistributions of source code must retain the above copyright notice, this 
** list of conditions and the following disclaimer.
** 
** 2. Redistributions in binary form must reproduce the above copyright notice, 
** this list of conditions and the following disclaimer in the documentation 
** and/or other materials provided with the distribution.
** 
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
** ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
** ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
**  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
**  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
**  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
**  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**  
 */
package com.shinkusoft.javapuzzle2;

import java.io.File;
import com.shinkusoft.javapuzzle2.PuzzleFrame.PuzzleFrameFileSetter;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

import com.shinkusoft.javapuzzle2.JavaPuzzle2.*;
import java.util.logging.Level;

/**
 *
 * @author Gihan
 */
public class NewPuzzlePanel extends javax.swing.JPanel implements PuzzleFrameFileSetter
{

    /**
     * Creates new form NewPuzzlePanel
     */ 
    public NewPuzzlePanel(PuzzleFrame owner, String filename, JDialog rootDialog)
    {
        initComponents();
        this.rootDialog = rootDialog;
        this.owner = owner;
        updateFileNameAreaEnabled(useBitmapFile);
        setFilename(this.initialFilename);
    }
    
    public void setBrowseListener(LoadImageListener listener)
    {
        browselistener = listener;
        browselistener.setFileSetterCallback(this);
    }
    
    @Override
    public void setFilename(String browsedFilename)
    {
        this.filename = browsedFilename;
        fileNameTextField.setText(browsedFilename);
        CheckFilenameAndUpdate(browsedFilename);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        useBitMapCheckBox = new javax.swing.JCheckBox();
        fileNameTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        bitmapLabel = new javax.swing.JLabel();
        rankLabel = new javax.swing.JLabel();
        RankComboBox = new javax.swing.JComboBox<>();
        filenameBrowseButton = new javax.swing.JButton();
        CropButtonRadioButton = new javax.swing.JRadioButton();
        ScaleModeRadioButton = new javax.swing.JRadioButton();
        ImageImportModeLabel = new javax.swing.JLabel();
        numRowsValue = new javax.swing.JTextField();
        colsLabel = new javax.swing.JLabel();
        numColsValue = new javax.swing.JTextField();
        rowsLabel = new javax.swing.JLabel();
        ApplyButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        useBitMapCheckBox.setText("Use bitmap image");
        useBitMapCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                useBitMapCheckBoxActionPerformed(evt);
            }
        });

        fileNameTextField.setText("Image File Name");
        fileNameTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fileNameTextFieldActionPerformed(evt);
            }
        });

        bitmapLabel.setText("Bitmap Image filename:");

        rankLabel.setText("Row, Column configuration:");

        RankComboBox.setFont(new java.awt.Font("Candara", 1, 12)); // NOI18N
        RankComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "4 x 4", "5 x 5", "6 x 6", "7 x 7", "8 x 8", "9 x 9", "10 x 10", "custom configuration" }));
        RankComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RankComboBoxActionPerformed(evt);
            }
        });

        filenameBrowseButton.setText("Browse");
        filenameBrowseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                filenameBrowseButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(CropButtonRadioButton);
        CropButtonRadioButton.setText("Crop");
        CropButtonRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CropButtonRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(ScaleModeRadioButton);
        ScaleModeRadioButton.setSelected(true);
        ScaleModeRadioButton.setText("Scale");
        ScaleModeRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ScaleModeRadioButtonActionPerformed(evt);
            }
        });

        ImageImportModeLabel.setText("Image import mode:");

        numRowsValue.setText("4");
        numRowsValue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                numRowsValueActionPerformed(evt);
            }
        });

        colsLabel.setText("Columns:");

        numColsValue.setText("4");
        numColsValue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                numColsValueActionPerformed(evt);
            }
        });

        rowsLabel.setText("Rows:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useBitMapCheckBox)
                    .addComponent(bitmapLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filenameBrowseButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ImageImportModeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(CropButtonRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(ScaleModeRadioButton)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rankLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rowsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numRowsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(colsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numColsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(RankComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jSeparator1, jSeparator2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {numColsValue, numRowsValue});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(useBitMapCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bitmapLabel)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filenameBrowseButton))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CropButtonRadioButton)
                        .addComponent(ImageImportModeLabel))
                    .addComponent(ScaleModeRadioButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rankLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RankComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rowsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numRowsValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numColsValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {RankComboBox, rankLabel});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CropButtonRadioButton, ScaleModeRadioButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fileNameTextField, filenameBrowseButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {colsLabel, numColsValue, numRowsValue, rowsLabel});

        ApplyButton.setText("Apply");
        ApplyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ApplyButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        CancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ApplyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton)
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator3)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ApplyButton, CancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ApplyButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ApplyButton, CancelButton, okButton});

    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelButtonActionPerformed
    {//GEN-HEADEREND:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        assert(rootDialog !=  null);
        rootDialog.setVisible(false);
        rootDialog.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void fileNameTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileNameTextFieldActionPerformed
    {//GEN-HEADEREND:event_fileNameTextFieldActionPerformed
        assert(useBitmapFile); //should only be applicable for bitmap usage
        fileNameTextField.setEnabled(useBitmapFile);
        
        String currentFilename = fileNameTextField.getText();
        JavaPuzzle2.logger.log(Level.FINE, "Text field text update, now: {0}", currentFilename);
        
        if (CheckFilenameAndUpdate(currentFilename))
        {
            filename = currentFilename;
        }
    }//GEN-LAST:event_fileNameTextFieldActionPerformed

    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ApplyButtonActionPerformed
    {//GEN-HEADEREND:event_ApplyButtonActionPerformed
        if (CheckFilenameAndUpdate(filename))
        {
            assert(owner !=  null);
            owner.setFilename(filename);
        }
        JavaPuzzle2.logger.log(Level.FINE, "owner filename value set to : {0}", filename);
        checkRowColTextFields(true);
    }//GEN-LAST:event_ApplyButtonActionPerformed

    private void useBitMapCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_useBitMapCheckBoxActionPerformed
    {//GEN-HEADEREND:event_useBitMapCheckBoxActionPerformed
        
        if (useBitMapCheckBox.isSelected())
        {
            boolean currentFileNameOK = CheckFilenameAndUpdate(filename);
            useBitmapFile = true;
            ApplyButton.setEnabled(currentFileNameOK);
        }
        else
        {
            ApplyButton.setEnabled(true);
            useBitmapFile = false;
        }
        updateFileNameAreaEnabled(useBitmapFile);
    }//GEN-LAST:event_useBitMapCheckBoxActionPerformed

    private void RankComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RankComboBoxActionPerformed
    {//GEN-HEADEREND:event_RankComboBoxActionPerformed
        final int selectedIndex = RankComboBox.getSelectedIndex();
        JavaPuzzle2.logger.log(Level.FINE, "Rank combo box index: {0}", selectedIndex);
        if (selectedIndex < 0)
        {
            return;
        }
        boolean updateRequired = true;
        switch(selectedIndex)
        {
            case(0):
                numRows = 4;
                numCols = 4;
                break;
            case(1):
                numRows = 5;
                numCols = 5;
                break;
            case(2):
                numRows = 6;
                numCols = 6;
                break;
            case(3):
                numRows = 7;
                numCols = 7;
                break;
            case(4):
                numRows = 8;
                numCols = 8;
                break;
            case(5):
                numRows = 9;
                numRows = 9;
                break;
            case(6):
                numRows = 10;
                numCols = 10;
                break;
            case(7):
                updateRequired = false;
                break;
            default:
                assert(false);
                break;
        }
        if (updateRequired)
        {
            updateRowColsTextFields();
        }
    }//GEN-LAST:event_RankComboBoxActionPerformed

    private void filenameBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_filenameBrowseButtonActionPerformed
    {//GEN-HEADEREND:event_filenameBrowseButtonActionPerformed
        if (browselistener != null)
        {
            browselistener.actionPerformed(evt);
            String browsedFilename = browselistener.getFilename();
            
            if(browsedFilename != null && !browsedFilename.equals(""))
            {
                this.filename = browsedFilename;
            }

        }
    }//GEN-LAST:event_filenameBrowseButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        if (!useBitmapFile || CheckFilenameAndUpdate(filename))
        {
            boolean sizeOK = checkRowColTextFields(false);
            
            if (sizeOK)
            {

                if (JavaPuzzle2.SpaceOkForNewPuzzle())
                {
                    JavaPuzzle2.logger.fine("New Puzzle trigger point!");

                    PuzzleConfigData config = new PuzzleConfigData(numRows, numCols, useBitmapFile, filename, importMode);

                    PuzzleTileSet newPuzzle = new PuzzleTileSet(config, owner, JavaPuzzle2.makeDefaultPuzzleName());     

                    JavaPuzzle2.AddPuzzle(owner, newPuzzle);
                    owner.updatePuzzleDocumentList();
                    owner.repaint();
                    
                    rootDialog.setVisible(false);
                    rootDialog.dispose();
                }
                else
                {
                    //cymbal crash?
                    JOptionPane.showMessageDialog(owner,
                            "Please delete a puzzle before adding a new one", 
                            "Puzzle limit exceeded", 
                            JOptionPane.INFORMATION_MESSAGE); 

                    //TODO implement puzzle deletion!
                }
            } //sizeOK
        }
        else
        {
            //TODO pop up a text box telling the user that the current filename is not valid
            JOptionPane.showMessageDialog(owner,
                    "Please select a valid filename",
                    "Invalid filename",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private boolean checkRowColTextFields(boolean silent)
    {
        boolean ok = checkNumRowsTextField();
        ok &= checkNumColsTextField();
        
        //this code makes assumptions about the combo box range
        //TODO: try to find a way to make this data-driven
        if (ok)
        {
            if (numRows == numCols
                    && numRows >= JavaPuzzle2.MIN_ROWS)
            {
                RankComboBox.setSelectedIndex(numRows - JavaPuzzle2.DEFAULT_ROWS);
                RankComboBox.repaint();
            }
            else
            {
                RankComboBox.setSelectedIndex(RankComboBox.getItemCount() - 1);
            }
        }
        
        if (!silent && !ok)
        {
            IssueInvalidRankWarning();
        }
        
        return ok;
    }

    private void CropButtonRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CropButtonRadioButtonActionPerformed
    {//GEN-HEADEREND:event_CropButtonRadioButtonActionPerformed
        importMode = BitmapImportMode.CROP;
    }//GEN-LAST:event_CropButtonRadioButtonActionPerformed

    private void ScaleModeRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ScaleModeRadioButtonActionPerformed
    {//GEN-HEADEREND:event_ScaleModeRadioButtonActionPerformed
        importMode = BitmapImportMode.SCALE;
    }//GEN-LAST:event_ScaleModeRadioButtonActionPerformed

    private void numRowsValueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_numRowsValueActionPerformed
    {//GEN-HEADEREND:event_numRowsValueActionPerformed

        checkNumRowsTextField();
    }//GEN-LAST:event_numRowsValueActionPerformed

    private boolean checkNumRowsTextField()
    {
        // TODO add your handling code here:
        boolean result = true;
        String numRowsString = numRowsValue.getText();
        try
        {
            Integer numRowsInteger = Integer.decode(numRowsString);

            if (numRowsInteger != null
                    && numRowsInteger >= JavaPuzzle2.MIN_ROWS
                    && numRowsInteger <= JavaPuzzle2.MAX_ROWS)
            {
                numRows = numRowsInteger;
            } else
            {
                //IssueInvalidRankWarning();
                result = false;
            }
            JavaPuzzle2.logger.log(Level.FINEST, "Check Rows string: {0} numRowsInteger:{1} numRows: {2}", new Object[]{numRowsString, numRowsInteger, numRows});
        }
        
        catch (NumberFormatException e)
        {
            //numRowsValue.setText(Integer.toString(numRows));
            result = false;
        }
        
        return result;
    }

    private void numColsValueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_numColsValueActionPerformed
    {//GEN-HEADEREND:event_numColsValueActionPerformed
        checkNumColsTextField();
    }//GEN-LAST:event_numColsValueActionPerformed

    private boolean checkNumColsTextField()
    {
        // TODO add your handling code here:
        boolean result = true;
        String numColsString = numColsValue.getText();
        try
        {
            Integer numColsInteger = Integer.decode(numColsString);
            if (numColsInteger != null
                    && numColsInteger >= JavaPuzzle2.MIN_COLS
                    && numColsInteger <= JavaPuzzle2.MAX_COLS)
            {
                numCols = numColsInteger;
            } else
            {
                result = false;
                //IssueInvalidRankWarning();
            }
        }
        catch (NumberFormatException e)
        {
            result = false;
        }
        return result;
    }
    
    private void IssueInvalidRankWarning()
    {
        JOptionPane.showMessageDialog(owner,
                "Please correct the puzzle size value(s) to continue",
                "Invalid puzzle size",
                JOptionPane.INFORMATION_MESSAGE);
        numRowsValue.setText(Integer.toString(numRows));
        numColsValue.setText(Integer.toString(numCols));
    }

    private void updateFileNameAreaEnabled(final boolean enabled)
    {
        fileNameTextField.setEnabled(enabled);
        CropButtonRadioButton.setEnabled(enabled);
        ScaleModeRadioButton.setEnabled(enabled);
        fileNameTextField.setEnabled(enabled);
        filenameBrowseButton.setEnabled(enabled);
    }
    
    protected void updateApplyButtonEnabled()
    {
        boolean ok = false;
        if (checkRowColTextFields(true) &&
            (!this.useBitmapFile || CheckFilenameAndUpdate(filename)))
        {
            ok = true;
        }
        ApplyButton.setEnabled(ok);
    }
    
    private boolean CheckFilenameAndUpdate(String browsedFilename)
    {        
        File f = new File(browsedFilename);
        boolean result = f.isFile();
        if (result)
        {
            assert (ApplyButton != null);
            ApplyButton.setEnabled(true);
        }
        else
        {
            ApplyButton.setEnabled(false);
        }
        return result;
    }
    
    private void updateRowColsTextFields()
    {
        numRowsValue.setText(Integer.toString(numRows));
        numColsValue.setText(Integer.toString(numCols));
    }
    
    private boolean useBitmapFile = false;
    final private PuzzleFrame         owner;
    final private javax.swing.JDialog rootDialog;
    private LoadImageListener browselistener;
    final private String initialFilename = "New Image Filename";
    private String filename;
    
    public int numRows = 4; //TODO
    public int numCols = 4; //TODO
    public boolean useBitmap;
    public String bitmapFilename;
    private BitmapImportMode importMode = BitmapImportMode.SCALE;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JRadioButton CropButtonRadioButton;
    private javax.swing.JLabel ImageImportModeLabel;
    private javax.swing.JComboBox<String> RankComboBox;
    private javax.swing.JRadioButton ScaleModeRadioButton;
    private javax.swing.JLabel bitmapLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel colsLabel;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JButton filenameBrowseButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField numColsValue;
    private javax.swing.JTextField numRowsValue;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel rankLabel;
    private javax.swing.JLabel rowsLabel;
    private javax.swing.JCheckBox useBitMapCheckBox;
    // End of variables declaration//GEN-END:variables
}
